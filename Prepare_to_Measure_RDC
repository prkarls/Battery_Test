#!/usr/bin/env ruby

# This scrip runs stress on the unit until the state of charge is 65%. 
# It then configures the unit to perform battery internal impedance measurements at every power before shutting down
# You must manually turn the unit on, connect it to a charger, and monitor 818 registers BA and BB for the measurement/
# calculation to be complete.

def initialize()
  @reg_path = '/sys/kernel/debug/regmap/sunxi-rsb-3a3/registers'
  
  # Any specific first steps here

end

def registers
  regs = File.read(@reg_path)

  reg_vals = {}
  regs.split("\n").each do |line|
    key, value = line.strip.split(': ')

    # Map hex values to Fixnums
    reg_vals[key.to_i(16)] = value.to_i(16)
  end

  reg_vals
end

def set_bit(register)
  old_val = registers[register]
  new_val = yield(old_val)
  cmd = "echo #{('%02X' % register).downcase} #{('%02X' % new_val).downcase} > #{@reg_path}"
  `#{cmd}`
end

def enable_charging_at_600mA
  # Set Bit 7 of Register 0x30 to 0 (Enable VBUS Power Path).
  set_bit(0x30) {|b| b & 0b01111111 }

  # Sleep to allow the BC Detection circuit to complete.
  sleep 3

  # Set VBUS current to 900mA.
  set_bit(0x35) {|b| b & 0b00001111 }
  set_bit(0x35) {|b| b | 0b00100000 }

  # Set MAX charge current to 600mA.
  set_bit(0x33) {|b| b & 0b11110000 }
  set_bit(0x33) {|b| b | 0b00000010 }
end

def configure_rdc_measurement
  # Configure measurement with 60s timers
  set_bit(0xe9) {|b| b & 0b00000000 }
  set_bit(0xe9) {|b| b | 0b00100100 }

  # Set minimum measurement current to 150mA
  set_bit(0xeb) {|b| b & 0b00000000 }
  set_bit(0xeb) {|b| b | 0b00001000 }

  # Enable recalculation
  set_bit(0xec) {|b| b & 0b00000000 }
  set_bit(0xec) {|b| b | 0b00100000 }
end

def disable_vbus
  # Set Bit 7 of Register 0x30 to 1 (Disable VBUS Power Path).
  set_bit(0x30) {|b| b | 0b10000000 }
end

# Kill any tasks here:
#`systemctl kill ____`

# Initialze
printf("Initialize\n")
initialize
sleep 1

# Disable VBUS to force the unit to run on battery power.
disable_vbus
sleep 1

# Assume state of charge is greater than 66%, begin to bring the state of charge down using stress.
printf("Start stress on 8 cores.\n")
thread = Thread.new do
    `nohup ./stress -c 8 2>&1 > /dev/null < /dev/null &`
end
sleep 1

# Wawit for the state of charge to drop to 65%.
printf("Wait for state of charge to decrease to 65 percent.\n")
count = 0
loop do
  # Read capacity
  soc_now = `cat /sys/devices/platform/soc/1f03400.rsb/sunxi-rsb-3a3/axp20x-battery-power-supply/power_supply/axp20x-battery/capacity`.strip.to_i
  printf("Current SoC: %d \n", soc_now)
  
  # Check the soc
  if soc_now < 66
    break
  else
    sleep 10
  end
end

# Disable stress and wait 5 minutes.
printf("Kill stress and wait 5 minutes.\n")
`killall stress`
sleep 300

# Configure the charging and measurement process
printf("Configure the RDC measurement.\n")
configure_rdc_measurement
sleep 10
enable_charging_at_600mA
sleep 1

# Shutdown
printf("Done, shutting down.\n")
`shutdown now`

